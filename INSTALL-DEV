The goal of this setup is to run the brep Apache2 modules from the development
build while still being as close to the real deployment as possible. To this
end, we use default, system-wide installations of both Apache2 and Postgres.

In the below instructions replace <user> with your login and www-data with the
user under which Apache2 is running (See the "User" directive in the Apache2
.conf file).


0. Check Permissions

Check that the files in the brep/ directory are readable by "others". If they
are not, then run the following two commands to grant Apache2 read access:

setfacl -Rdm g:www-data:rx brep
setfacl -n -Rm g:www-data:rx brep

And also for all the directories leading up to brep/, for example, if you have
~/projects/brep/, then:

setfacl -m g:www-data:rx ~/ ~/projects

[Note that strictly speaking www-data in the above two commands is the Apache2
group, not user. However, most installations use the same name for both.]


1. Create PostgreSQL User and Database

$ sudo sudo -u postgres psql # Note: double sudo is not a mistake.

CREATE DATABASE brep;
CREATE USER <user>;
GRANT ALL PRIVILEGES ON DATABASE brep TO <user>;
CREATE USER "www-data" INHERIT IN ROLE <user>;

Exit psql (^D), then make sure the logins work:

$ psql -d brep
$ sudo sudo -u www-data psql -d brep

To troubleshoot, see PostgreSQL logs, for example:

$ sudo tail -f /var/log/postgresql/*.log


2. Create Database Schema and Load the Repository

All the commands are executed from brep project root.

$ psql --quiet -d brep -f brep/package.sql
$ loader/brep-loader tests/loader/r.conf # Or some other loader config.

To verify:

$ psql -d brep -c 'SELECT name, summary FROM repository'


3. Setup Apache2 Module

Here we assume Apache2 is installed and you have an appropriate VirtualServer
ready (the one for the default site is usually a good candidate). Open the
corresponding Apache2 .conf file and add the following inside VirtualServer,
replacing <BREP-OUT-ROOT> and <BREP-SRC-ROOT> with the actual absolute paths
(if you built brep in the source tree, then the two would be the same).

        # Load the brep module.
        #
        LoadModule brep_module <BREP-OUT-ROOT>/brep/mod_brep.so
        SetHandler brep

        # Repository root. Use / for web server root. And don't forget to also
        # update the Alias directives below.
        #
        brep-root /pkg/

        # Brep module configuration.
        #
        brep-conf <BREP-SRC-ROOT>/etc/brep.conf

        # Static brep content (CSS files).
        #
        # Note: trailing slashes are important!
        #
        Alias /pkg/@/ <BREP-SRC-ROOT>/www/

        <Directory "<BREP-SRC-ROOT>/www">
            Require all granted
        </Directory>

You may want to replace <BREP-SRC-ROOT>/etc/brep.conf with a custom
configuration file if you often need to modify it.

Restart Apache2 (use the second version for systemd):

$ sudo /etc/init.d/apache2 restart
$ sudo systemctl restart apache2

To verify, visit the repository root. To troubleshoot, see Apache logs, for
example:

$ sudo tail -f /var/log/apache2/error.log


4. Reloading During Development

To do a "complete reload" (i.e., recreate database schema, load the repository
data, and reload the Apache2 plugin), execute the following from brep/:

psql --quiet -d brep -f brep/package.sql
loader/brep-loader tests/loader/r.conf
sudo /etc/init.d/apache2 restart
