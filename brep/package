// file      : brep/package -*- C++ -*-
// copyright : Copyright (c) 2014-2015 Code Synthesis Ltd
// license   : MIT; see accompanying LICENSE file

#ifndef BPKG_PACKAGE
#define BPKG_PACKAGE

#include <map>
#include <string>
#include <vector>
#include <memory>  // shared_ptr
#include <utility> // pair
#include <cstdint> // uint16

#include <odb/core.hxx>
#include <odb/forward.hxx>  // database
#include <odb/lazy-ptr.hxx>
#include <odb/nullable.hxx>

#include <bpkg/manifest>

namespace brep
{
  // @@ If namespace, then should probably call it 'repo'.
  //
  // @@ Should probably use optional from libbutl instead of odb::nullable
  //    for consistency. Create butl profile?
  //
  // @@ Might make sense to put some heavy members (e.g., description,
  //    containers) into a separate section.
  //
  // @@ Not sure there is a benefit in making tags a full-blown container
  //    (i.e., a separate table). Maybe provide a mapping of vector<string>
  //    to TEXT as a comma-separated list.
  //

  // Forward declarations.
  //
  struct package;
  struct package_version;

  using strings = std::vector<std::string>;

  using version = bpkg::version;
  #pragma db value(version) definition

  using version_type = brep::version;

  #pragma db value
  struct package_version_id
  {
    std::string package;
    std::uint16_t epoch;
    std::string canonical;

    // Database mapping.
    //
    #pragma db member(package) points_to(package)
  };

  inline bool
  operator< (const package_version_id& x, const package_version_id& y)
  {
    int r (x.package.compare (y.package));

    if (r != 0)
      return r < 0;

    return x.epoch < y.epoch ||
           x.epoch == y.epoch && x.canonical < y.canonical;
  }

  using priority = bpkg::priority;
  #pragma db value(priority) definition
  #pragma db member(priority::value) column("")

  using url = bpkg::url;
  #pragma db value(url) definition
  #pragma db member(url::value) virtual(std::string) before access(this)  \
          column("")

  using email = bpkg::email;
  #pragma db value(email) definition
  #pragma db member(email::value) virtual(std::string) before access(this) \
          column("")

  // licenses
  //
  using licenses = bpkg::licenses;
  #pragma db value(licenses) definition

  using license_alternatives = std::vector<licenses>;

  // dependencies
  //
  using comparison = bpkg::comparison;
  using version_comparison = bpkg::version_comparison;
  #pragma db value(version_comparison) definition
  #pragma db member(version_comparison::value) column("")

  // Notes:
  //
  // 1. Will the package be always resolvable? What if it is in
  //    another repository (i.e., a "chained" third-party repo).
  //    The question is then whether we will load such "third-
  //    party packages" (i.e., packages that are not in our
  //    repository). If the answer is yes, then we can have
  //    a pointer here. If the answer is no, then we can't.
  //    Also, if the answer is yes, we probably don't need to
  //    load as much information as for "our own" packages. We
  //    also shouldn't be showing them in search results, etc.
  //    I think all we need is to know which repository this
  //    package comes from so that we can tell the user. How are
  //    we going to capture this? Poly hierarchy of packages?
  //
  // 2. I believe we don't need to use a weak pointer here since
  //    there should be no package dependency cycles (and therefore
  //    ownership cycles).
  //
  // 3. Actually there can be dependency cycle as dependency referes not to
  //    just a package but a specific version, so for the same pair of
  //    packages dependency for different versions can have an opposite
  //    directions. The possible solution is instead of a package we point
  //    to the earliest version that satisfies the condition. But this
  //    approach requires to ensure no cycles exist before instantiating
  //    package objects which in presense of "foreign" packages can be
  //    tricky. Can stick to just a package name until get some clarity on
  //    "foreign" package resolution.
  //
  using dependency = bpkg::dependency;
  #pragma db value(dependency) definition

  using dependency_alternatives = bpkg::dependency_alternatives;
  #pragma db value(dependency_alternatives) definition

  using dependencies = std::vector<dependency_alternatives>;

  // requirements
  //
  using requirement_alternatives = bpkg::requirement_alternatives;
  #pragma db value(requirement_alternatives) definition

  using requirements = std::vector<requirement_alternatives>;

  // Intended for instantiating key classes for maps used for simulation of
  // 2-dimensional value type containers. Parameter type T not being used in
  // template implementation is required to instantiate unrelated key
  // classes to achieve proper table column naming with ODB pragmas.
  //
  template <typename T>
  struct index_pair
  {
    std::size_t first;
    std::size_t second;

    index_pair (std::size_t f = 0, std::size_t s = 0): first (f), second (s) {}

    bool
    operator< (const index_pair& v) const
    {
      return first < v.first || first == v.first && second < v.second;
    }
  };

  #pragma db object pointer(std::shared_ptr) session
  struct package
  {
    // Manifest data.
    //
    using url_type = brep::url;
    using email_type = brep::email;

    std::string name;
    std::string summary;
    strings tags;
    std::string description;
    url_type url;
    odb::nullable<url_type> package_url;
    email_type email;
    odb::nullable<email_type> package_email;
    std::vector<odb::lazy_weak_ptr<package_version>> versions;

    // Additional data.
    //

    // Database mapping.
    //
    #pragma db member(name) id
    #pragma db member(tags) id_column("package") value_column("tag")
    #pragma db member(versions) inverse(id.package)
  };

  #pragma db object pointer(std::shared_ptr) session
  struct package_version
  {
    // Manifest data.
    //
    using package_type = brep::package;
    using priority_type = brep::priority;
    using license_alternatives_type = brep::license_alternatives;
    using dependencies_type = brep::dependencies;
    using requirements_type = brep::requirements;

    version_type version;
    std::shared_ptr<package_type> package;
    priority_type priority;
    license_alternatives_type license_alternatives;
    std::string changes;
    dependencies_type dependencies;
    requirements_type requirements;

    // Additional data.
    //
    std::string repository; // E.g., "stable", "testing".

    // Database mapping.
    //

    // id
    //
    package_version_id
    id () const
    {
      return package_version_id
      {package->name, version.epoch, version.canonical};
    }

    void
    id (const package_version_id&, odb::database&);

    #pragma db member(version) transient
    #pragma db member(package) transient
    #pragma db member(id) virtual(package_version_id) before id \
      get(id) set(id ((?), (!))) column("")
    #pragma db member(upstream) virtual(std::string) after(id) \
      get(version.upstream) set(version.upstream=(?))
    #pragma db member(revision) virtual(std::uint16_t) after(upstream) \
      get(version.revision) set(version.revision = (?))

    // license
    //
    using _license_key = index_pair<licenses>;
    using _licenses_type = std::map<_license_key, std::string>;

    #pragma db value(_license_key)
    #pragma db member(_license_key::first) column("alternative")
    #pragma db member(_license_key::second) column("index")

    #pragma db member(license_alternatives) id_column("") value_column("")
    #pragma db member(licenses)                                 \
      virtual(_licenses_type)                                   \
      after(license_alternatives)                               \
      get(_get (this.license_alternatives))                     \
      set(_set (this.license_alternatives, (?)))                \
      id_column("") key_column("") value_column("license")

    // dependencies
    //
    using _dependency_key = index_pair<dependency_alternatives>;
    using _dependency_alternatives_type =
               std::map<_dependency_key, dependency>;

    #pragma db value(_dependency_key)
    #pragma db member(_dependency_key::first) column("dependency")
    #pragma db member(_dependency_key::second) column("index")

    #pragma db member(dependencies) id_column("") value_column("")
    #pragma db member(dependency_alternatives)                  \
      virtual(_dependency_alternatives_type)                    \
      after(dependencies)                                       \
      get(_get (this.dependencies))                             \
      set(_set (this.dependencies, (?)))                        \
      id_column("") key_column("") value_column("dep_")

    // requirements
    //
    using _requirement_key = index_pair<requirement_alternatives>;
    using _requirement_alternatives_type =
               std::map<_requirement_key, std::string>;

    #pragma db value(_requirement_key)
    #pragma db member(_requirement_key::first) column("requirement")
    #pragma db member(_requirement_key::second) column("index")

    #pragma db member(requirements) id_column("") value_column("")
    #pragma db member(requirement_alternatives)                 \
      virtual(_requirement_alternatives_type)                   \
      after(requirements)                                       \
      get(_get (this.requirements))                             \
      set(_set (this.requirements, (?)))                        \
      id_column("") key_column("") value_column("id")
  };
}

// Nested container emulation support for ODB.
//
// Note that the outer index in the inner container should strictly
// speaking be a foreign key pointing to the index of the outer
// container. The only way to achieve this currently is to manually
// add the constraint via ALTER TABLE ADD CONSTRAINT. Note, however,
// that as long as we only modify these tables via the ODB container
// interface, not having the foreign key (and not having ON DELETE
// CASCADE) should be harmless (since we have a foreign key pointing
// to the object id).
//
#include <map>
#include <vector>
#include <cstddef>     // size_t
#include <utility>     // pair, declval()
#include <cassert>
#include <type_traits> // remove_reference

namespace odb
{
  template <typename O>
  struct _inner: std::remove_reference<decltype (std::declval<O> ()[0])> {};

  template <typename O>
  std::map<brep::index_pair<O>, typename _inner<O>::type>
  _get (const std::vector<O>& v)
  {
    using namespace std;

    using I = typename _inner<O>::type;
    using key = brep::index_pair<O>;

    map<key, I> r;
    for (size_t n (0); n != v.size (); ++n)
    {
      const O& o (v[n]);
      for (size_t m (0); m != o.size (); ++m)
        r.emplace (key (n, m), o[m]);
    }
    return r;
  }

  //@@ Second argument should be && once ODB uses move().
  //
  template <typename K, typename I, typename O>
  void
  _set (std::vector<O>& v, std::map<K, I>& r)
  {
    using namespace std;

    for (auto& p: r)
    {
      size_t n (p.first.first);
      size_t m (p.first.second);
      I& i (p.second);

      assert (n < v.size ());
      assert (m == v[n].size ());
      v[n].push_back (std::move (i));
    }
  }
}

#endif // BPKG_PACKAGE
