#!/usr/bin/env bash

# file      : brep/submit/submit-dir.in
# copyright : Copyright (c) 2014-2018 Code Synthesis Ltd
# license   : MIT; see accompanying LICENSE file

# Simple package submission handler with directory storage.
#
# Validate the package archive located in the specified submission directory
# extracting and parsing the package manifest (saved as package.manifest in
# the submission directory). Keep the submission directory unless simulating.
# Write the submission result manifest to stdout.
#
usage="usage: $0 <dir>"

verbose= #true

trap "{ exit 1; }" ERR
set -o errtrace # Trap ERR in functions.

@import brep/submit/submit@

if [ "$#" != 1 ]; then
  error "$usage"
fi

# Submission data directory (last and the only argument).
#
data_dir="${!#/}"

if [ -z "$data_dir" ]; then
  error "$usage"
fi

if [ ! -d "$data_dir" ]; then
  error "'$data_dir' does not exist or is not a directory"
fi

reference="$(basename "$data_dir")"

# Parse the submission request manifest and obtain the archive path as well
# as the simulate value.
#
manifest_parser_start "$data_dir/request.manifest"

archive=
simulate=

while IFS=: read -ru "$manifest_parser_ofd" -d '' n v; do
  case "$n" in
    archive)  archive="$v"  ;;
    simulate) simulate="$v" ;;
  esac
done

manifest_parser_finish

if [ -z "$archive" ]; then
  error "archive manifest value expected"
fi

if [ -n "$simulate" -a "$simulate" != "success" ]; then
  exit_with_manifest 400 "unrecognized simulation outcome '$simulate'"
fi

m="$data_dir/package.manifest"
extract_package_manifest "$data_dir/$archive" "$m"

# Parse the package manifest and obtain the package name, version, and
# project.
#
manifest_parser_start "$m"

name=
version=
project=

while IFS=: read -ru "$manifest_parser_ofd" -d '' n v; do
  case "$n" in
    name)    name="$v"    ;;
    version) version="$v" ;;
    project) project="$v" ;;
  esac
done

manifest_parser_finish

if [ -z "$name" ]; then
  error "name manifest value expected"
fi

if [ -z "$version" ]; then
  error "version manifest value expected"
fi

if [ -z "$project" ]; then
  project="$name"
fi

if [ -n "$simulate" ]; then
  rm -r "$data_dir"
  trace "$name/$version submission is simulated"
else
  trace "$name/$version submission is queued"
fi

exit_with_manifest 200 "$name/$version submission is queued" "$reference"
