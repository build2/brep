// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef LIBBREP_COMMON_ODB_HXX
#define LIBBREP_COMMON_ODB_HXX

// Begin prologue.
//
#include <libbutl/small-vector-odb.hxx>
#include <libbrep/wrapper-traits.hxx>
#include <libbrep/common-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if ODB_VERSION != 20500UL
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include <libbrep/common.hxx>

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // _version
  //
  template <>
  class access::composite_value_traits< ::brep::_version, id_pgsql >
  {
    public:
    typedef ::brep::_version value_type;

    struct image_type
    {
      // epoch
      //
      int epoch_value;
      bool epoch_null;

      // canonical_upstream
      //
      details::buffer canonical_upstream_value;
      std::size_t canonical_upstream_size;
      bool canonical_upstream_null;

      // canonical_release
      //
      details::buffer canonical_release_value;
      std::size_t canonical_release_size;
      bool canonical_release_null;

      // revision
      //
      int revision_value;
      bool revision_null;

      // upstream
      //
      details::buffer upstream_value;
      std::size_t upstream_size;
      bool upstream_null;

      // release
      //
      details::buffer release_value;
      std::size_t release_size;
      bool release_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 6UL;
  };

  // email
  //
  template <>
  class access::composite_value_traits< ::bpkg::email, id_pgsql >
  {
    public:
    typedef ::bpkg::email value_type;

    struct image_type
    {
      // value
      //
      details::buffer value_value;
      std::size_t value_size;
      bool value_null;

      // comment
      //
      details::buffer comment_value;
      std::size_t comment_size;
      bool comment_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // version_constraint
  //
  template <>
  class access::composite_value_traits< ::bpkg::version_constraint, id_pgsql >
  {
    public:
    typedef ::bpkg::version_constraint value_type;

    struct image_type
    {
      // min_version
      //
      composite_value_traits< ::brep::_version, id_pgsql >::image_type min_version_value;

      // max_version
      //
      composite_value_traits< ::brep::_version, id_pgsql >::image_type max_version_value;

      // min_open
      //
      bool min_open_value;
      bool min_open_null;

      // max_open
      //
      bool max_open_value;
      bool max_open_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 14UL;
  };

  // requirement_alternative
  //
  template <>
  class access::composite_value_traits< ::bpkg::requirement_alternative, id_pgsql >
  {
    public:
    typedef ::bpkg::requirement_alternative value_type;

    struct image_type
    {
      // enable
      //
      details::buffer enable_value;
      std::size_t enable_size;
      bool enable_null;

      // reflect
      //
      details::buffer reflect_value;
      std::size_t reflect_size;
      bool reflect_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // requirement_alternatives
  //
  template <>
  class access::composite_value_traits< ::bpkg::requirement_alternatives, id_pgsql >
  {
    public:
    typedef ::bpkg::requirement_alternatives value_type;

    struct image_type
    {
      // buildtime
      //
      bool buildtime_value;
      bool buildtime_null;

      // comment
      //
      details::buffer comment_value;
      std::size_t comment_size;
      bool comment_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // build_constraint
  //
  template <>
  class access::composite_value_traits< ::bpkg::build_constraint, id_pgsql >
  {
    public:
    typedef ::bpkg::build_constraint value_type;

    struct image_type
    {
      // exclusion
      //
      bool exclusion_value;
      bool exclusion_null;

      // config
      //
      details::buffer config_value;
      std::size_t config_size;
      bool config_null;

      // target
      //
      details::buffer target_value;
      std::size_t target_size;
      bool target_null;

      // comment
      //
      details::buffer comment_value;
      std::size_t comment_size;
      bool comment_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 4UL;
  };

  // build_class_expr
  //
  template <>
  class access::composite_value_traits< ::bpkg::build_class_expr, id_pgsql >
  {
    public:
    typedef ::bpkg::build_class_expr value_type;

    struct image_type
    {
      // expression
      //
      details::buffer expression_value;
      std::size_t expression_size;
      bool expression_null;

      // comment
      //
      details::buffer comment_value;
      std::size_t comment_size;
      bool comment_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // build_auxiliary
  //
  template <>
  class access::composite_value_traits< ::bpkg::build_auxiliary, id_pgsql >
  {
    public:
    typedef ::bpkg::build_auxiliary value_type;

    struct image_type
    {
      // environment_name
      //
      details::buffer environment_name_value;
      std::size_t environment_name_size;
      bool environment_name_null;

      // config
      //
      details::buffer config_value;
      std::size_t config_size;
      bool config_null;

      // comment
      //
      details::buffer comment_value;
      std::size_t comment_size;
      bool comment_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 3UL;
  };

  // canonical_version
  //
  template <>
  class access::composite_value_traits< ::brep::canonical_version, id_pgsql >
  {
    public:
    typedef ::brep::canonical_version value_type;

    struct image_type
    {
      // epoch
      //
      int epoch_value;
      bool epoch_null;

      // canonical_upstream
      //
      details::buffer canonical_upstream_value;
      std::size_t canonical_upstream_size;
      bool canonical_upstream_null;

      // canonical_release
      //
      details::buffer canonical_release_value;
      std::size_t canonical_release_size;
      bool canonical_release_null;

      // revision
      //
      int revision_value;
      bool revision_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 4UL;
  };

  // upstream_version
  //
  template <>
  class access::composite_value_traits< ::brep::upstream_version, id_pgsql >
  {
    public:
    typedef ::brep::upstream_version value_type;

    struct image_type
    {
      // upstream_
      //
      details::buffer upstream_value;
      std::size_t upstream_size;
      bool upstream_null;

      // release_
      //
      details::buffer release_value;
      std::size_t release_size;
      bool release_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // package_id
  //
  template <>
  class access::composite_value_traits< ::brep::package_id, id_pgsql >
  {
    public:
    typedef ::brep::package_id value_type;

    struct image_type
    {
      // tenant
      //
      details::buffer tenant_value;
      std::size_t tenant_size;
      bool tenant_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // version
      //
      composite_value_traits< ::brep::canonical_version, id_pgsql >::image_type version_value;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 6UL;
  };

  // _repository_location
  //
  template <>
  class access::composite_value_traits< ::brep::_repository_location, id_pgsql >
  {
    public:
    typedef ::brep::_repository_location value_type;

    struct image_type
    {
      // url
      //
      details::buffer url_value;
      std::size_t url_size;
      bool url_null;

      // type
      //
      details::buffer type_value;
      std::size_t type_size;
      bool type_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // repository_id
  //
  template <>
  class access::composite_value_traits< ::brep::repository_id, id_pgsql >
  {
    public:
    typedef ::brep::repository_id value_type;

    struct image_type
    {
      // tenant
      //
      details::buffer tenant_value;
      std::size_t tenant_size;
      bool tenant_null;

      // canonical_name
      //
      details::buffer canonical_name_value;
      std::size_t canonical_name_size;
      bool canonical_name_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // public_key_id
  //
  template <>
  class access::composite_value_traits< ::brep::public_key_id, id_pgsql >
  {
    public:
    typedef ::brep::public_key_id value_type;

    struct image_type
    {
      // tenant
      //
      details::buffer tenant_value;
      std::size_t tenant_size;
      bool tenant_null;

      // fingerprint
      //
      details::buffer fingerprint_value;
      std::size_t fingerprint_size;
      bool fingerprint_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // build_toolchain
  //
  template <>
  class access::composite_value_traits< ::brep::build_toolchain, id_pgsql >
  {
    public:
    typedef ::brep::build_toolchain value_type;

    struct image_type
    {
      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // version
      //
      composite_value_traits< ::brep::_version, id_pgsql >::image_type version_value;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 7UL;
  };

  // build_class_expr_key
  //
  template <>
  class access::composite_value_traits< ::brep::build_class_expr_key, id_pgsql >
  {
    public:
    typedef ::brep::build_class_expr_key value_type;

    struct image_type
    {
      // outer
      //
      long long outer_value;
      bool outer_null;

      // inner
      //
      long long inner_value;
      bool inner_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // build_constraint_key
  //
  template <>
  class access::composite_value_traits< ::brep::build_constraint_key, id_pgsql >
  {
    public:
    typedef ::brep::build_constraint_key value_type;

    struct image_type
    {
      // outer
      //
      long long outer_value;
      bool outer_null;

      // inner
      //
      long long inner_value;
      bool inner_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // build_auxiliary_key
  //
  template <>
  class access::composite_value_traits< ::brep::build_auxiliary_key, id_pgsql >
  {
    public:
    typedef ::brep::build_auxiliary_key value_type;

    struct image_type
    {
      // outer
      //
      long long outer_value;
      bool outer_null;

      // inner
      //
      long long inner_value;
      bool inner_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // requirement_alternative_key
  //
  template <>
  class access::composite_value_traits< ::brep::requirement_alternative_key, id_pgsql >
  {
    public:
    typedef ::brep::requirement_alternative_key value_type;

    struct image_type
    {
      // outer
      //
      long long outer_value;
      bool outer_null;

      // inner
      //
      long long inner_value;
      bool inner_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // requirement_key
  //
  template <>
  class access::composite_value_traits< ::brep::requirement_key, id_pgsql >
  {
    public:
    typedef ::brep::requirement_key value_type;

    struct image_type
    {
      // outer
      //
      long long outer_value;
      bool outer_null;

      // middle
      //
      long long middle_value;
      bool middle_null;

      // inner
      //
      long long inner_value;
      bool inner_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 3UL;
  };

  // tenant_service
  //
  template <>
  class access::composite_value_traits< ::brep::tenant_service, id_pgsql >
  {
    public:
    typedef ::brep::tenant_service value_type;

    struct image_type
    {
      // id
      //
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      // type
      //
      details::buffer type_value;
      std::size_t type_size;
      bool type_null;

      // ref_count
      //
      long long ref_count_value;
      bool ref_count_null;

      // data
      //
      details::buffer data_value;
      std::size_t data_size;
      bool data_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 4UL;
  };
}

#include <libbrep/common-odb.ixx>

#include <odb/post.hxx>

#endif // LIBBREP_COMMON_ODB_HXX
