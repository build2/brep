// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
}

namespace odb
{
  // _version
  //

  inline
  bool access::composite_value_traits< ::brep::_version, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.epoch_null;
    r = r && i.canonical_upstream_null;
    r = r && i.canonical_release_null;
    r = r && i.revision_null;
    r = r && i.upstream_null;
    r = r && i.release_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::_version, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.epoch_null = true;
    i.canonical_upstream_null = true;
    i.canonical_release_null = true;
    i.revision_null = true;
    i.upstream_null = true;
    i.release_null = true;
  }

  // build_constraint
  //

  inline
  bool access::composite_value_traits< ::bpkg::build_constraint, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.exclusion_null;
    r = r && i.config_null;
    r = r && i.target_null;
    r = r && i.comment_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::bpkg::build_constraint, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.exclusion_null = true;
    i.config_null = true;
    i.target_null = true;
    i.comment_null = true;
  }

  // build_class_expr
  //

  inline
  bool access::composite_value_traits< ::bpkg::build_class_expr, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.expression_null;
    r = r && i.comment_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::bpkg::build_class_expr, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.expression_null = true;
    i.comment_null = true;
  }

  // canonical_version
  //

  inline
  bool access::composite_value_traits< ::brep::canonical_version, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.epoch_null;
    r = r && i.canonical_upstream_null;
    r = r && i.canonical_release_null;
    r = r && i.revision_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::canonical_version, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.epoch_null = true;
    i.canonical_upstream_null = true;
    i.canonical_release_null = true;
    i.revision_null = true;
  }

  // upstream_version
  //

  inline
  bool access::composite_value_traits< ::brep::upstream_version, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.upstream_null;
    r = r && i.release_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::upstream_version, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.upstream_null = true;
    i.release_null = true;
  }

  // package_id
  //

  inline
  bool access::composite_value_traits< ::brep::package_id, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.tenant_null;
    r = r && i.name_null;
    r = r && composite_value_traits< ::brep::canonical_version, id_pgsql >::get_null (i.version_value);
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::package_id, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.tenant_null = true;
    i.name_null = true;
    composite_value_traits< ::brep::canonical_version, id_pgsql >::set_null (i.version_value, sk);
  }

  // _repository_location
  //

  inline
  bool access::composite_value_traits< ::brep::_repository_location, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.url_null;
    r = r && i.type_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::_repository_location, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.url_null = true;
    i.type_null = true;
  }

  // repository_id
  //

  inline
  bool access::composite_value_traits< ::brep::repository_id, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.tenant_null;
    r = r && i.canonical_name_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::repository_id, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.tenant_null = true;
    i.canonical_name_null = true;
  }
}

