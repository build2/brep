// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // build_tenant
  //

  inline
  access::object_traits< ::brep::build_tenant >::id_type
  access::object_traits< ::brep::build_tenant >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::brep::build_tenant >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::brep::build_tenant >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // build_repository
  //

  inline
  access::object_traits< ::brep::build_repository >::id_type
  access::object_traits< ::brep::build_repository >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::brep::build_repository >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::brep::build_repository >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // build_public_key
  //

  inline
  access::object_traits< ::brep::build_public_key >::id_type
  access::object_traits< ::brep::build_public_key >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::brep::build_public_key >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::brep::build_public_key >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // build_package
  //

  inline
  access::object_traits< ::brep::build_package >::id_type
  access::object_traits< ::brep::build_package >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::brep::build_package >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::brep::build_package >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // build_package_version
  //

  inline
  void access::view_traits< ::brep::build_package_version >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // buildable_package
  //

  inline
  void access::view_traits< ::brep::buildable_package >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // buildable_package_count
  //

  inline
  void access::view_traits< ::brep::buildable_package_count >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // build_tenant
  //

  inline
  void access::object_traits_impl< ::brep::build_tenant, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::brep::build_tenant, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // build_repository
  //

  inline
  void access::object_traits_impl< ::brep::build_repository, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::brep::build_repository, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // build_public_key
  //

  inline
  void access::object_traits_impl< ::brep::build_public_key, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::brep::build_public_key, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // build_package_config
  //

  inline
  bool access::composite_value_traits< ::brep::build_package_config, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.name_null;
    r = r && i.arguments_null;
    r = r && i.comment_null;
    r = r && composite_value_traits< ::bpkg::email, id_pgsql >::get_null (i.email_value);
    r = r && composite_value_traits< ::bpkg::email, id_pgsql >::get_null (i.warning_email_value);
    r = r && composite_value_traits< ::bpkg::email, id_pgsql >::get_null (i.error_email_value);
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::build_package_config, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.name_null = true;
    i.arguments_null = true;
    i.comment_null = true;
    composite_value_traits< ::bpkg::email, id_pgsql >::set_null (i.email_value, sk);
    composite_value_traits< ::bpkg::email, id_pgsql >::set_null (i.warning_email_value, sk);
    composite_value_traits< ::bpkg::email, id_pgsql >::set_null (i.error_email_value, sk);
  }

  // build_package_bot_key_key
  //

  inline
  bool access::composite_value_traits< ::brep::build_package_bot_key_key, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.outer_null;
    r = r && i.inner_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::build_package_bot_key_key, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.outer_null = true;
    i.inner_null = true;
  }

  // build_dependency
  //

  inline
  bool access::composite_value_traits< ::brep::build_dependency, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.name_null;
    r = r && composite_value_traits< ::bpkg::version_constraint, id_pgsql >::get_null (i.constraint_value);
    r = r && composite_value_traits< ::brep::package_id, id_pgsql >::get_null (i.package_value);
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::build_dependency, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.name_null = true;
    composite_value_traits< ::bpkg::version_constraint, id_pgsql >::set_null (i.constraint_value, sk);
    composite_value_traits< ::brep::package_id, id_pgsql >::set_null (i.package_value, sk);
  }

  // build_test_dependency
  //

  inline
  bool access::composite_value_traits< ::brep::build_test_dependency, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::brep::build_dependency, id_pgsql >::get_null (i);
    r = r && i.type_null;
    r = r && i.buildtime_null;
    r = r && i.enable_null;
    r = r && i.reflect_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::build_test_dependency, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    composite_value_traits< ::brep::build_dependency, id_pgsql >::set_null (i, sk);
    i.type_null = true;
    i.buildtime_null = true;
    i.enable_null = true;
    i.reflect_null = true;
  }

  // build_package
  //

  inline
  void access::object_traits_impl< ::brep::build_package, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // build_package_version
  //

  // buildable_package
  //

  // buildable_package_count
  //
}

