// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // build
  //

  inline
  access::object_traits< ::brep::build >::id_type
  access::object_traits< ::brep::build >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::brep::build >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::brep::build >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // toolchain
  //

  inline
  void access::view_traits< ::brep::toolchain >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // package_build
  //

  inline
  void access::view_traits< ::brep::package_build >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // package_build_count
  //

  inline
  void access::view_traits< ::brep::package_build_count >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // package_build_id
  //

  inline
  void access::view_traits< ::brep::package_build_id >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // build_delay
  //

  inline
  access::object_traits< ::brep::build_delay >::id_type
  access::object_traits< ::brep::build_delay >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::brep::build_delay >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::brep::build_delay >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

#include <odb/schema-version.hxx>

namespace odb
{
  // operation_result
  //

  inline
  bool access::composite_value_traits< ::bbot::operation_result, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.operation_null;
    r = r && i.status_null;
    r = r && i.log_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::bbot::operation_result, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.operation_null = true;
    i.status_null = true;
    i.log_null = true;
  }

  // build_id
  //

  inline
  bool access::composite_value_traits< ::brep::build_id, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::brep::package_id, id_pgsql >::get_null (i.package_value);
    r = r && i.target_null;
    r = r && i.target_config_name_null;
    r = r && i.package_config_name_null;
    r = r && i.toolchain_name_null;
    r = r && composite_value_traits< ::brep::canonical_version, id_pgsql >::get_null (i.toolchain_version_value);
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::build_id, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    composite_value_traits< ::brep::package_id, id_pgsql >::set_null (i.package_value, sk);
    i.target_null = true;
    i.target_config_name_null = true;
    i.package_config_name_null = true;
    i.toolchain_name_null = true;
    composite_value_traits< ::brep::canonical_version, id_pgsql >::set_null (i.toolchain_version_value, sk);
  }

  // build_machine
  //

  inline
  bool access::composite_value_traits< ::brep::build_machine, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.name_null;
    r = r && i.summary_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::brep::build_machine, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.name_null = true;
    i.summary_null = true;
  }

  // build
  //

  inline
  void access::object_traits_impl< ::brep::build, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // toolchain
  //

  // package_build
  //

  // package_build_count
  //

  // package_build_id
  //

  // build_delay
  //

  inline
  void access::object_traits_impl< ::brep::build_delay, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::brep::build_delay, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }
}

