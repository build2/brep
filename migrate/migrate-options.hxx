// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

#ifndef MIGRATE_MIGRATE_OPTIONS_HXX
#define MIGRATE_MIGRATE_OPTIONS_HXX

// Begin prologue.
//
//
// End prologue.

#include <iosfwd>
#include <string>
#include <cstddef>
#include <exception>

#ifndef CLI_POTENTIALLY_UNUSED
#  if defined(_MSC_VER) || defined(__xlC__)
#    define CLI_POTENTIALLY_UNUSED(x) (void*)&x
#  else
#    define CLI_POTENTIALLY_UNUSED(x) (void)x
#  endif
#endif

namespace cli
{
  class usage_para
  {
    public:
    enum value
    {
      none,
      text,
      option
    };

    usage_para (value);

    operator value () const 
    {
      return v_;
    }

    private:
    value v_;
  };

  class unknown_mode
  {
    public:
    enum value
    {
      skip,
      stop,
      fail
    };

    unknown_mode (value);

    operator value () const 
    {
      return v_;
    }

    private:
    value v_;
  };

  // Exceptions.
  //

  class exception: public std::exception
  {
    public:
    virtual void
    print (::std::ostream&) const = 0;
  };

  ::std::ostream&
  operator<< (::std::ostream&, const exception&);

  class unknown_option: public exception
  {
    public:
    virtual
    ~unknown_option () noexcept;

    unknown_option (const std::string& option);

    const std::string&
    option () const;

    virtual void
    print (::std::ostream&) const;

    virtual const char*
    what () const noexcept;

    private:
    std::string option_;
  };

  class unknown_argument: public exception
  {
    public:
    virtual
    ~unknown_argument () noexcept;

    unknown_argument (const std::string& argument);

    const std::string&
    argument () const;

    virtual void
    print (::std::ostream&) const;

    virtual const char*
    what () const noexcept;

    private:
    std::string argument_;
  };

  class missing_value: public exception
  {
    public:
    virtual
    ~missing_value () noexcept;

    missing_value (const std::string& option);

    const std::string&
    option () const;

    virtual void
    print (::std::ostream&) const;

    virtual const char*
    what () const noexcept;

    private:
    std::string option_;
  };

  class invalid_value: public exception
  {
    public:
    virtual
    ~invalid_value () noexcept;

    invalid_value (const std::string& option,
                   const std::string& value,
                   const std::string& message = std::string ());

    const std::string&
    option () const;

    const std::string&
    value () const;

    const std::string&
    message () const;

    virtual void
    print (::std::ostream&) const;

    virtual const char*
    what () const noexcept;

    private:
    std::string option_;
    std::string value_;
    std::string message_;
  };

  class eos_reached: public exception
  {
    public:
    virtual void
    print (::std::ostream&) const;

    virtual const char*
    what () const noexcept;
  };

  // Command line argument scanner interface.
  //
  // The values returned by next() are guaranteed to be valid
  // for the two previous arguments up until a call to a third
  // peek() or next().
  //
  // The position() function returns a monotonically-increasing
  // number which, if stored, can later be used to determine the
  // relative position of the argument returned by the following
  // call to next(). Note that if multiple scanners are used to
  // extract arguments from multiple sources, then the end
  // position of the previous scanner should be used as the
  // start position of the next.
  //
  class scanner
  {
    public:
    virtual
    ~scanner ();

    virtual bool
    more () = 0;

    virtual const char*
    peek () = 0;

    virtual const char*
    next () = 0;

    virtual void
    skip () = 0;

    virtual std::size_t
    position () = 0;
  };

  class argv_scanner: public scanner
  {
    public:
    argv_scanner (int& argc,
                  char** argv,
                  bool erase = false,
                  std::size_t start_position = 0);

    argv_scanner (int start,
                  int& argc,
                  char** argv,
                  bool erase = false,
                  std::size_t start_position = 0);

    int
    end () const;

    virtual bool
    more ();

    virtual const char*
    peek ();

    virtual const char*
    next ();

    virtual void
    skip ();

    virtual std::size_t
    position ();

    protected:
    std::size_t start_position_;
    int i_;
    int& argc_;
    char** argv_;
    bool erase_;
  };

  template <typename X>
  struct parser;
}

#include <vector>

#include <string>

#include <cstdint>

class options
{
  public:
  options ();

  options (int& argc,
           char** argv,
           bool erase = false,
           ::cli::unknown_mode option = ::cli::unknown_mode::fail,
           ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

  options (int start,
           int& argc,
           char** argv,
           bool erase = false,
           ::cli::unknown_mode option = ::cli::unknown_mode::fail,
           ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

  options (int& argc,
           char** argv,
           int& end,
           bool erase = false,
           ::cli::unknown_mode option = ::cli::unknown_mode::fail,
           ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

  options (int start,
           int& argc,
           char** argv,
           int& end,
           bool erase = false,
           ::cli::unknown_mode option = ::cli::unknown_mode::fail,
           ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

  options (::cli::scanner&,
           ::cli::unknown_mode option = ::cli::unknown_mode::fail,
           ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

  // Option accessors.
  //
  const bool&
  recreate () const;

  const bool&
  drop () const;

  const std::string&
  db_user () const;

  bool
  db_user_specified () const;

  const std::string&
  db_password () const;

  bool
  db_password_specified () const;

  const std::string&
  db_name () const;

  bool
  db_name_specified () const;

  const std::string&
  db_host () const;

  bool
  db_host_specified () const;

  const std::uint16_t&
  db_port () const;

  bool
  db_port_specified () const;

  const std::string&
  pager () const;

  bool
  pager_specified () const;

  const std::vector<std::string>&
  pager_option () const;

  bool
  pager_option_specified () const;

  const bool&
  help () const;

  const bool&
  version () const;

  // Print usage information.
  //
  static ::cli::usage_para
  print_usage (::std::ostream&,
               ::cli::usage_para = ::cli::usage_para::none);

  // Implementation details.
  //
  protected:
  bool
  _parse (const char*, ::cli::scanner&);

  private:
  bool
  _parse (::cli::scanner&,
          ::cli::unknown_mode option,
          ::cli::unknown_mode argument);

  public:
  bool recreate_;
  bool drop_;
  std::string db_user_;
  bool db_user_specified_;
  std::string db_password_;
  bool db_password_specified_;
  std::string db_name_;
  bool db_name_specified_;
  std::string db_host_;
  bool db_host_specified_;
  std::uint16_t db_port_;
  bool db_port_specified_;
  std::string pager_;
  bool pager_specified_;
  std::vector<std::string> pager_option_;
  bool pager_option_specified_;
  bool help_;
  bool version_;
};

// Print page usage information.
//
::cli::usage_para
print_usage (::std::ostream&,
             ::cli::usage_para = ::cli::usage_para::none);

#include <migrate/migrate-options.ixx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MIGRATE_MIGRATE_OPTIONS_HXX
