// file      : web/xhtml -*- C++ -*-
// copyright : Copyright (c) 2014-2015 Code Synthesis Ltd
// license   : MIT; see accompanying LICENSE file

#ifndef WEB_XHTML
#define WEB_XHTML

#include <xml/serializer>

namespace web
{
  // "Canonical" XHTML5 vocabulary.
  //
  // * One-letter tag names and local variable clash problem
  //
  // a at|an|an  anc anch
  // b bt|bo|bl  bld bold
  // i it|it|it  itl ital
  // p pt|pr|pr  par para
  // q qt|qu|qt  quo quot
  // s st|st|st  stk strk
  // u ut|un|un  unl undr
  //
  // Other options:
  //   - _a, a_, xa
  //   - A, I
  //   - x::i
  //   - user-defined literals: "a"_e, "/a"_e, "id"_a
  //
  // Things can actually get much worse, consider:
  //
  // int i;
  // s << i << "text" << ~i;
  //
  // So perhaps this is the situation where the explicit namespace
  // qualification (e.g., x::p) is the only robust option?
  //
  //
  // * Element/attribute name clash problem (e.g., STYLE)
  //
  //   - some attribute/element name decorator (STYLEA, STYLE_A, STYLE_)
  //   - rename attribute/element (e.g., STYLEDEF or CSSSTYLE[adds TYPE]);
  //     in case of STYLE we should probably rename the element since
  //     attribute will be much more frequently used.
  //   - "scope" attributes inside elements (P::STYLE); somewhat
  //     burdensome: P(P::STYLE); could then use low-case names
  //     for attributes
  //   - "scope" elements inside other elements (HEAD::STYLE); also
  //     burdensome.
  //
  //
  // * Text wrapping/indentation
  //
  // For some (inline) elements we want additional indentation:
  //
  // 1. Indent content on newline (e.g., for <style>).
  // 2. Automatically wrap and indent lines at (or before) certain
  //    length, say, 80 characters (e.g., for <p>).
  //
  // Would be nice to be able to implement this at the XHTML level,
  // not XML.
  //
  namespace xhtml
  {
    const char* const xmlns = "http://www.w3.org/1999/xhtml";

    struct attr_value_base
    {
      const char* name;
      mutable const attr_value_base* next;

      virtual void
      operator() (xml::serializer& s) const = 0;

    protected:
      explicit
      attr_value_base (const char* n): name (n), next (nullptr) {}
    };

    template <typename T>
    struct attr_value: attr_value_base
    {
      const T* val;

      attr_value (const char* n, const T& v): attr_value_base (n), val (&v) {}

      virtual void
      operator() (xml::serializer& s) const
      {
        s.attribute (name, *val);
        if (next != nullptr)
          s << *next;
      }
    };

    struct element_base;

    // Element without any content, e.g., *BR.
    //
    struct empty_element
    {
      const element_base* e;

      void
      operator() (xml::serializer& s) const;
    };

    class end_element
    {
    public:
      const char* name;

      explicit
      end_element (const char* n): name (n) {}

      virtual void
      operator() (xml::serializer& s) const
      {
        return s.end_element (xmlns, name);
      }
    };

    struct element_base
    {
      virtual void
      operator() (xml::serializer& s) const = 0;

      virtual end_element
      operator~ () const = 0;

      empty_element
      operator* () const {return empty_element {this};}
    };

    inline void empty_element::
    operator() (xml::serializer& s) const {s << *e << ~*e;}

    // Element with an attribute chain, e.g., P(ID = 123, CLASS = "abc").
    //
    struct attr_element: element_base
    {
      const element_base* e;
      const attr_value_base* a;

      attr_element (const element_base& e, const attr_value_base& a)
          : e (&e), a (&a) {}

      virtual void
      operator() (xml::serializer& s) const {s << *e << *a;}

      virtual end_element
      operator~ () const {return ~*e;}
    };

    struct element: element_base
    {
      const char* name;

      explicit
      element (const char* n): name (n) {}

      virtual void
      operator() (xml::serializer& s) const {s.start_element (xmlns, name);}

      virtual end_element
      operator~ () const {return end_element (name);}

      // s << elem(attr1 = 123, attr2 = "abc");
      //
      template <typename T1>
      attr_element
      operator () (const attr_value<T1>& a1) const
      {
        return attr_element (*this, a1);
      }

      template <typename T1, typename... TN>
      attr_element
      operator () (const attr_value<T1>& a1, const attr_value<TN>&... an) const
      {
        a1.next = operator() (an...).a;
        return attr_element (*this, a1);
      }
    };

    class end_inline_element: public end_element
    {
    public:
      explicit
      end_inline_element (const char* n): end_element (n) {}

      virtual void
      operator() (xml::serializer& s) const
      {
        s.end_element (xmlns, name);
        s.resume_indentation ();
      }
    };

    struct inline_element: element
    {
      using element::element;
      using element::operator();

      virtual void
      operator() (xml::serializer& s) const
      {
        s.suspend_indentation ();
        element::operator() (s);
      }

      //@@ Can't do that: you are slicing end_inline_element to
      //   end_element.
      //
      virtual end_element
      operator~ () const {return end_inline_element (name);}
    };

    class end_attribute
    {
    public:
      const char* name;

      explicit
      end_attribute (const char* n): name (n) {}

      virtual void
      operator() (xml::serializer& s) const {return s.end_attribute (name);}
    };

    struct attribute
    {
      const char* name;

      explicit
      attribute (const char* n): name (n) {}

      // s << (attr1 = 123) << (attr2 = "abc");
      //
      template <typename T>
      attr_value<T>
      operator= (const T& v) const {return attr_value<T> (name, v);}

      // s << attr1 (123) << attr2 ("abc");
      //
      template <typename T>
      attr_value<T>
      operator() (const T& v) const {return attr_value<T> (name, v);}

      // s << attr1 << 123 << ~attr1 << attr2 << "abc" << ~attr2;
      //
      void
      operator() (xml::serializer& s) const {s.start_attribute (name);}

      virtual end_attribute
      operator~ () const {return end_attribute (name);}
    };

    // Elements.
    //
    // Note that they are all declared static which means we may end
    // up with multiple identical copies if this header get included
    // into multiple translation units. The hope here is that the
    // compiler will "see-through" and eliminate all of them.
    //
    struct html_element: element
    {
      html_element (): element ("html") {}

      virtual void
      operator() (xml::serializer& s) const
      {
        s.doctype_decl ("html");
        s.start_element (xmlns, name);
        s.namespace_decl (xmlns, "");
      }
    };
    static const html_element HTML;

    struct head_element: element
    {
      head_element (): element ("head") {}

      virtual void
      operator() (xml::serializer& s) const
      {
        s.start_element (xmlns, name);
        s.start_element (xmlns, "meta");
        s.attribute ("charset", "UTF-8");
        s.end_element ();
      }
    };
    static const head_element HEAD;

    struct css_style_element: element
    {
      css_style_element (): element ("style") {}

      virtual void
      operator() (xml::serializer& s) const
      {
        s.start_element (xmlns, name);
        s.attribute ("type", "text/css");
      }
    };
    static const css_style_element CSS_STYLE;

    static const element BODY  ("body");
    static const element DIV   ("div");
    static const element P     ("p");
    static const element TITLE ("title");

    static const inline_element A ("a");
    static const inline_element B ("b");
    static const inline_element I ("i");
    static const inline_element U ("u");

    static const inline_element EM ("em");
    static const inline_element BR ("br");

    // Attributes.
    //
    static const attribute CLASS ("class");
    static const attribute HREF  ("href");
    static const attribute ID    ("id");
    static const attribute STYLE ("style");
    static const attribute TYPE  ("type");
  }
}

#endif // WEB_XHTML
