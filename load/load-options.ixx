// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

// Begin prologue.
//
//
// End prologue.

#include <cassert>

namespace cli
{
  // usage_para
  //
  inline usage_para::
  usage_para (value v)
  : v_ (v)
  {
  }

  // unknown_mode
  //
  inline unknown_mode::
  unknown_mode (value v)
  : v_ (v)
  {
  }

  // exception
  //
  inline ::std::ostream&
  operator<< (::std::ostream& os, const exception& e)
  {
    e.print (os);
    return os;
  }

  // unknown_option
  //
  inline unknown_option::
  unknown_option (const std::string& option)
  : option_ (option)
  {
  }

  inline const std::string& unknown_option::
  option () const
  {
    return option_;
  }

  // unknown_argument
  //
  inline unknown_argument::
  unknown_argument (const std::string& argument)
  : argument_ (argument)
  {
  }

  inline const std::string& unknown_argument::
  argument () const
  {
    return argument_;
  }

  // missing_value
  //
  inline missing_value::
  missing_value (const std::string& option)
  : option_ (option)
  {
  }

  inline const std::string& missing_value::
  option () const
  {
    return option_;
  }

  // invalid_value
  //
  inline invalid_value::
  invalid_value (const std::string& option,
                 const std::string& value,
                 const std::string& message)
  : option_ (option),
    value_ (value),
    message_ (message)
  {
  }

  inline const std::string& invalid_value::
  option () const
  {
    return option_;
  }

  inline const std::string& invalid_value::
  value () const
  {
    return value_;
  }

  inline const std::string& invalid_value::
  message () const
  {
    return message_;
  }

  // argv_scanner
  //
  inline argv_scanner::
  argv_scanner (int& argc, char** argv, bool erase)
  : i_ (1), argc_ (argc), argv_ (argv), erase_ (erase)
  {
  }

  inline argv_scanner::
  argv_scanner (int start, int& argc, char** argv, bool erase)
  : i_ (start), argc_ (argc), argv_ (argv), erase_ (erase)
  {
  }

  inline int argv_scanner::
  end () const
  {
    return i_;
  }
}

// options
//

inline const bool& options::
ignore_unknown () const
{
  return this->ignore_unknown_;
}

inline const bool& options::
force () const
{
  return this->force_;
}

inline const bool& options::
shallow () const
{
  return this->shallow_;
}

inline const std::string& options::
tenant () const
{
  return this->tenant_;
}

inline bool options::
tenant_specified () const
{
  return this->tenant_specified_;
}

inline const brep::path& options::
overrides_file () const
{
  return this->overrides_file_;
}

inline bool options::
overrides_file_specified () const
{
  return this->overrides_file_specified_;
}

inline const std::string& options::
db_user () const
{
  return this->db_user_;
}

inline bool options::
db_user_specified () const
{
  return this->db_user_specified_;
}

inline const std::string& options::
db_password () const
{
  return this->db_password_;
}

inline bool options::
db_password_specified () const
{
  return this->db_password_specified_;
}

inline const std::string& options::
db_name () const
{
  return this->db_name_;
}

inline bool options::
db_name_specified () const
{
  return this->db_name_specified_;
}

inline const std::string& options::
db_host () const
{
  return this->db_host_;
}

inline bool options::
db_host_specified () const
{
  return this->db_host_specified_;
}

inline const std::uint16_t& options::
db_port () const
{
  return this->db_port_;
}

inline bool options::
db_port_specified () const
{
  return this->db_port_specified_;
}

inline const brep::path& options::
bpkg () const
{
  return this->bpkg_;
}

inline bool options::
bpkg_specified () const
{
  return this->bpkg_specified_;
}

inline const brep::strings& options::
bpkg_option () const
{
  return this->bpkg_option_;
}

inline bool options::
bpkg_option_specified () const
{
  return this->bpkg_option_specified_;
}

inline const std::string& options::
pager () const
{
  return this->pager_;
}

inline bool options::
pager_specified () const
{
  return this->pager_specified_;
}

inline const std::vector<std::string>& options::
pager_option () const
{
  return this->pager_option_;
}

inline bool options::
pager_option_specified () const
{
  return this->pager_option_specified_;
}

inline const bool& options::
help () const
{
  return this->help_;
}

inline const bool& options::
version () const
{
  return this->version_;
}

// Begin epilogue.
//
//
// End epilogue.
