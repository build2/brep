// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

// Begin prologue.
//
#include <load/types-parsers.hxx>
//
// End prologue.

#include <load/load-options.hxx>

#include <map>
#include <set>
#include <string>
#include <vector>
#include <ostream>
#include <sstream>

namespace cli
{
  // unknown_option
  //
  unknown_option::
  ~unknown_option () throw ()
  {
  }

  void unknown_option::
  print (::std::ostream& os) const
  {
    os << "unknown option '" << option ().c_str () << "'";
  }

  const char* unknown_option::
  what () const throw ()
  {
    return "unknown option";
  }

  // unknown_argument
  //
  unknown_argument::
  ~unknown_argument () throw ()
  {
  }

  void unknown_argument::
  print (::std::ostream& os) const
  {
    os << "unknown argument '" << argument ().c_str () << "'";
  }

  const char* unknown_argument::
  what () const throw ()
  {
    return "unknown argument";
  }

  // missing_value
  //
  missing_value::
  ~missing_value () throw ()
  {
  }

  void missing_value::
  print (::std::ostream& os) const
  {
    os << "missing value for option '" << option ().c_str () << "'";
  }

  const char* missing_value::
  what () const throw ()
  {
    return "missing option value";
  }

  // invalid_value
  //
  invalid_value::
  ~invalid_value () throw ()
  {
  }

  void invalid_value::
  print (::std::ostream& os) const
  {
    os << "invalid value '" << value ().c_str () << "' for option '"
       << option ().c_str () << "'";

    if (!message ().empty ())
      os << ": " << message ().c_str ();
  }

  const char* invalid_value::
  what () const throw ()
  {
    return "invalid option value";
  }

  // eos_reached
  //
  void eos_reached::
  print (::std::ostream& os) const
  {
    os << what ();
  }

  const char* eos_reached::
  what () const throw ()
  {
    return "end of argument stream reached";
  }

  // scanner
  //
  scanner::
  ~scanner ()
  {
  }

  // argv_scanner
  //
  bool argv_scanner::
  more ()
  {
    return i_ < argc_;
  }

  const char* argv_scanner::
  peek ()
  {
    if (i_ < argc_)
      return argv_[i_];
    else
      throw eos_reached ();
  }

  const char* argv_scanner::
  next ()
  {
    if (i_ < argc_)
    {
      const char* r (argv_[i_]);

      if (erase_)
      {
        for (int i (i_ + 1); i < argc_; ++i)
          argv_[i - 1] = argv_[i];

        --argc_;
        argv_[argc_] = 0;
      }
      else
        ++i_;

      return r;
    }
    else
      throw eos_reached ();
  }

  void argv_scanner::
  skip ()
  {
    if (i_ < argc_)
      ++i_;
    else
      throw eos_reached ();
  }

  template <typename X>
  struct parser
  {
    static void
    parse (X& x, bool& xs, scanner& s)
    {
      using namespace std;

      const char* o (s.next ());
      if (s.more ())
      {
        string v (s.next ());
        istringstream is (v);
        if (!(is >> x && is.peek () == istringstream::traits_type::eof ()))
          throw invalid_value (o, v);
      }
      else
        throw missing_value (o);

      xs = true;
    }
  };

  template <>
  struct parser<bool>
  {
    static void
    parse (bool& x, scanner& s)
    {
      s.next ();
      x = true;
    }
  };

  template <>
  struct parser<std::string>
  {
    static void
    parse (std::string& x, bool& xs, scanner& s)
    {
      const char* o (s.next ());

      if (s.more ())
        x = s.next ();
      else
        throw missing_value (o);

      xs = true;
    }
  };

  template <typename X>
  struct parser<std::vector<X> >
  {
    static void
    parse (std::vector<X>& c, bool& xs, scanner& s)
    {
      X x;
      bool dummy;
      parser<X>::parse (x, dummy, s);
      c.push_back (x);
      xs = true;
    }
  };

  template <typename X, typename C>
  struct parser<std::set<X, C> >
  {
    static void
    parse (std::set<X, C>& c, bool& xs, scanner& s)
    {
      X x;
      bool dummy;
      parser<X>::parse (x, dummy, s);
      c.insert (x);
      xs = true;
    }
  };

  template <typename K, typename V, typename C>
  struct parser<std::map<K, V, C> >
  {
    static void
    parse (std::map<K, V, C>& m, bool& xs, scanner& s)
    {
      const char* o (s.next ());

      if (s.more ())
      {
        std::string ov (s.next ());
        std::string::size_type p = ov.find ('=');

        K k = K ();
        V v = V ();
        std::string kstr (ov, 0, p);
        std::string vstr (ov, (p != std::string::npos ? p + 1 : ov.size ()));

        int ac (2);
        char* av[] =
        {
          const_cast<char*> (o),
          0
        };

        bool dummy;
        if (!kstr.empty ())
        {
          av[1] = const_cast<char*> (kstr.c_str ());
          argv_scanner s (0, ac, av);
          parser<K>::parse (k, dummy, s);
        }

        if (!vstr.empty ())
        {
          av[1] = const_cast<char*> (vstr.c_str ());
          argv_scanner s (0, ac, av);
          parser<V>::parse (v, dummy, s);
        }

        m[k] = v;
      }
      else
        throw missing_value (o);

      xs = true;
    }
  };

  template <typename X, typename T, T X::*M>
  void
  thunk (X& x, scanner& s)
  {
    parser<T>::parse (x.*M, s);
  }

  template <typename X, typename T, T X::*M, bool X::*S>
  void
  thunk (X& x, scanner& s)
  {
    parser<T>::parse (x.*M, x.*S, s);
  }
}

#include <map>
#include <cstring>

// options
//

options::
options ()
: ignore_unknown_ (),
  force_ (),
  shallow_ (),
  tenant_ (),
  tenant_specified_ (false),
  overrides_file_ (),
  overrides_file_specified_ (false),
  db_user_ (),
  db_user_specified_ (false),
  db_password_ (),
  db_password_specified_ (false),
  db_name_ ("brep_package"),
  db_name_specified_ (false),
  db_host_ (),
  db_host_specified_ (false),
  db_port_ (0),
  db_port_specified_ (false),
  bpkg_ ("bpkg"),
  bpkg_specified_ (false),
  bpkg_option_ (),
  bpkg_option_specified_ (false),
  pager_ (),
  pager_specified_ (false),
  pager_option_ (),
  pager_option_specified_ (false),
  help_ (),
  version_ ()
{
}

options::
options (int& argc,
         char** argv,
         bool erase,
         ::cli::unknown_mode opt,
         ::cli::unknown_mode arg)
: ignore_unknown_ (),
  force_ (),
  shallow_ (),
  tenant_ (),
  tenant_specified_ (false),
  overrides_file_ (),
  overrides_file_specified_ (false),
  db_user_ (),
  db_user_specified_ (false),
  db_password_ (),
  db_password_specified_ (false),
  db_name_ ("brep_package"),
  db_name_specified_ (false),
  db_host_ (),
  db_host_specified_ (false),
  db_port_ (0),
  db_port_specified_ (false),
  bpkg_ ("bpkg"),
  bpkg_specified_ (false),
  bpkg_option_ (),
  bpkg_option_specified_ (false),
  pager_ (),
  pager_specified_ (false),
  pager_option_ (),
  pager_option_specified_ (false),
  help_ (),
  version_ ()
{
  ::cli::argv_scanner s (argc, argv, erase);
  _parse (s, opt, arg);
}

options::
options (int start,
         int& argc,
         char** argv,
         bool erase,
         ::cli::unknown_mode opt,
         ::cli::unknown_mode arg)
: ignore_unknown_ (),
  force_ (),
  shallow_ (),
  tenant_ (),
  tenant_specified_ (false),
  overrides_file_ (),
  overrides_file_specified_ (false),
  db_user_ (),
  db_user_specified_ (false),
  db_password_ (),
  db_password_specified_ (false),
  db_name_ ("brep_package"),
  db_name_specified_ (false),
  db_host_ (),
  db_host_specified_ (false),
  db_port_ (0),
  db_port_specified_ (false),
  bpkg_ ("bpkg"),
  bpkg_specified_ (false),
  bpkg_option_ (),
  bpkg_option_specified_ (false),
  pager_ (),
  pager_specified_ (false),
  pager_option_ (),
  pager_option_specified_ (false),
  help_ (),
  version_ ()
{
  ::cli::argv_scanner s (start, argc, argv, erase);
  _parse (s, opt, arg);
}

options::
options (int& argc,
         char** argv,
         int& end,
         bool erase,
         ::cli::unknown_mode opt,
         ::cli::unknown_mode arg)
: ignore_unknown_ (),
  force_ (),
  shallow_ (),
  tenant_ (),
  tenant_specified_ (false),
  overrides_file_ (),
  overrides_file_specified_ (false),
  db_user_ (),
  db_user_specified_ (false),
  db_password_ (),
  db_password_specified_ (false),
  db_name_ ("brep_package"),
  db_name_specified_ (false),
  db_host_ (),
  db_host_specified_ (false),
  db_port_ (0),
  db_port_specified_ (false),
  bpkg_ ("bpkg"),
  bpkg_specified_ (false),
  bpkg_option_ (),
  bpkg_option_specified_ (false),
  pager_ (),
  pager_specified_ (false),
  pager_option_ (),
  pager_option_specified_ (false),
  help_ (),
  version_ ()
{
  ::cli::argv_scanner s (argc, argv, erase);
  _parse (s, opt, arg);
  end = s.end ();
}

options::
options (int start,
         int& argc,
         char** argv,
         int& end,
         bool erase,
         ::cli::unknown_mode opt,
         ::cli::unknown_mode arg)
: ignore_unknown_ (),
  force_ (),
  shallow_ (),
  tenant_ (),
  tenant_specified_ (false),
  overrides_file_ (),
  overrides_file_specified_ (false),
  db_user_ (),
  db_user_specified_ (false),
  db_password_ (),
  db_password_specified_ (false),
  db_name_ ("brep_package"),
  db_name_specified_ (false),
  db_host_ (),
  db_host_specified_ (false),
  db_port_ (0),
  db_port_specified_ (false),
  bpkg_ ("bpkg"),
  bpkg_specified_ (false),
  bpkg_option_ (),
  bpkg_option_specified_ (false),
  pager_ (),
  pager_specified_ (false),
  pager_option_ (),
  pager_option_specified_ (false),
  help_ (),
  version_ ()
{
  ::cli::argv_scanner s (start, argc, argv, erase);
  _parse (s, opt, arg);
  end = s.end ();
}

options::
options (::cli::scanner& s,
         ::cli::unknown_mode opt,
         ::cli::unknown_mode arg)
: ignore_unknown_ (),
  force_ (),
  shallow_ (),
  tenant_ (),
  tenant_specified_ (false),
  overrides_file_ (),
  overrides_file_specified_ (false),
  db_user_ (),
  db_user_specified_ (false),
  db_password_ (),
  db_password_specified_ (false),
  db_name_ ("brep_package"),
  db_name_specified_ (false),
  db_host_ (),
  db_host_specified_ (false),
  db_port_ (0),
  db_port_specified_ (false),
  bpkg_ ("bpkg"),
  bpkg_specified_ (false),
  bpkg_option_ (),
  bpkg_option_specified_ (false),
  pager_ (),
  pager_specified_ (false),
  pager_option_ (),
  pager_option_specified_ (false),
  help_ (),
  version_ ()
{
  _parse (s, opt, arg);
}

::cli::usage_para options::
print_usage (::std::ostream& os, ::cli::usage_para p)
{
  CLI_POTENTIALLY_UNUSED (os);

  if (p != ::cli::usage_para::none)
    os << ::std::endl;

  os << "\033[1mOPTIONS\033[0m" << ::std::endl;

  os << std::endl
     << "\033[1m--ignore-unknown\033[0m      Ignore unknown manifest entries." << ::std::endl;

  os << std::endl
     << "\033[1m--force\033[0m               Reload package information regardless of the repository" << ::std::endl
     << "                      manifest file timestamps." << ::std::endl;

  os << std::endl
     << "\033[1m--shallow\033[0m             Don't load package information from prerequisite or" << ::std::endl
     << "                      complement repositories, don't fail if unable to resolve" << ::std::endl
     << "                      a package dependency, and don't detect package dependency" << ::std::endl
     << "                      cycles." << ::std::endl;

  os << std::endl
     << "\033[1m--tenant\033[0m \033[4mid\033[0m           Tenant the package and repository information should be" << ::std::endl
     << "                      loaded in. If not specified, then the single-tenant mode" << ::std::endl
     << "                      is assumed." << ::std::endl;

  os << std::endl
     << "\033[1m--overrides-file\033[0m \033[4mfile\033[0m Read package manifest overrides from the specified" << ::std::endl
     << "                      manifest fragment file and apply them to packages being" << ::std::endl
     << "                      loaded." << ::std::endl;

  os << std::endl
     << "\033[1m--db-user\033[0m|\033[1m-u\033[0m \033[4muser\033[0m     Database user name. If not specified, then operating" << ::std::endl
     << "                      system (login) name is used." << ::std::endl;

  os << std::endl
     << "\033[1m--db-password\033[0m \033[4mpass\033[0m    Database password. If not specified, then login without" << ::std::endl
     << "                      password is expected to work." << ::std::endl;

  os << std::endl
     << "\033[1m--db-name\033[0m|\033[1m-n\033[0m \033[4mname\033[0m     Database name. If not specified, then \033[1mbrep_package\033[0m is" << ::std::endl
     << "                      used by default." << ::std::endl;

  os << std::endl
     << "\033[1m--db-host\033[0m|\033[1m-h\033[0m \033[4mhost\033[0m     Database host name, address, or socket. If not specified," << ::std::endl
     << "                      then connect to \033[1mlocalhost\033[0m using the operating" << ::std::endl
     << "                      system-default mechanism (Unix-domain socket, etc)." << ::std::endl;

  os << std::endl
     << "\033[1m--db-port\033[0m|\033[1m-p\033[0m \033[4mport\033[0m     Database port number. If not specified, the default port" << ::std::endl
     << "                      is used." << ::std::endl;

  os << std::endl
     << "\033[1m--bpkg\033[0m \033[4mpath\033[0m           The package manager program to be used to fetch" << ::std::endl
     << "                      repository information. This should be the path to the" << ::std::endl
     << "                      \033[1mbpkg\033[0m executable. You can also specify additional options" << ::std::endl
     << "                      that should be passed to the package manager program with" << ::std::endl
     << "                      \033[1m--bpkg-option\033[0m. If the package manager program is not" << ::std::endl
     << "                      explicitly specified, then \033[1mbrep-load\033[0m will use \033[1mbpkg\033[0m by" << ::std::endl
     << "                      default." << ::std::endl;

  os << std::endl
     << "\033[1m--bpkg-option\033[0m \033[4mopt\033[0m     Additional option to be passed to the package manager" << ::std::endl
     << "                      program. See \033[1m--bpkg\033[0m for more information on the package" << ::std::endl
     << "                      manager program. Repeat this option to specify multiple" << ::std::endl
     << "                      package manager options." << ::std::endl;

  os << std::endl
     << "\033[1m--pager\033[0m \033[4mpath\033[0m          The pager program to be used to show long text. Commonly" << ::std::endl
     << "                      used pager programs are \033[1mless\033[0m and \033[1mmore\033[0m. You can also" << ::std::endl
     << "                      specify additional options that should be passed to the" << ::std::endl
     << "                      pager program with \033[1m--pager-option\033[0m. If an empty string is" << ::std::endl
     << "                      specified as the pager program, then no pager will be" << ::std::endl
     << "                      used. If the pager program is not explicitly specified," << ::std::endl
     << "                      then \033[1mbrep-load\033[0m will try to use \033[1mless\033[0m. If it is not" << ::std::endl
     << "                      available, then no pager will be used." << ::std::endl;

  os << std::endl
     << "\033[1m--pager-option\033[0m \033[4mopt\033[0m    Additional option to be passed to the pager program. See" << ::std::endl
     << "                      \033[1m--pager\033[0m for more information on the pager program. Repeat" << ::std::endl
     << "                      this option to specify multiple pager options." << ::std::endl;

  os << std::endl
     << "\033[1m--help\033[0m                Print usage information and exit." << ::std::endl;

  os << std::endl
     << "\033[1m--version\033[0m             Print version and exit." << ::std::endl;

  p = ::cli::usage_para::option;

  return p;
}

typedef
std::map<std::string, void (*) (options&, ::cli::scanner&)>
_cli_options_map;

static _cli_options_map _cli_options_map_;

struct _cli_options_map_init
{
  _cli_options_map_init ()
  {
    _cli_options_map_["--ignore-unknown"] =
    &::cli::thunk< options, bool, &options::ignore_unknown_ >;
    _cli_options_map_["--force"] =
    &::cli::thunk< options, bool, &options::force_ >;
    _cli_options_map_["--shallow"] =
    &::cli::thunk< options, bool, &options::shallow_ >;
    _cli_options_map_["--tenant"] =
    &::cli::thunk< options, std::string, &options::tenant_,
      &options::tenant_specified_ >;
    _cli_options_map_["--overrides-file"] =
    &::cli::thunk< options, brep::path, &options::overrides_file_,
      &options::overrides_file_specified_ >;
    _cli_options_map_["--db-user"] =
    &::cli::thunk< options, std::string, &options::db_user_,
      &options::db_user_specified_ >;
    _cli_options_map_["-u"] =
    &::cli::thunk< options, std::string, &options::db_user_,
      &options::db_user_specified_ >;
    _cli_options_map_["--db-password"] =
    &::cli::thunk< options, std::string, &options::db_password_,
      &options::db_password_specified_ >;
    _cli_options_map_["--db-name"] =
    &::cli::thunk< options, std::string, &options::db_name_,
      &options::db_name_specified_ >;
    _cli_options_map_["-n"] =
    &::cli::thunk< options, std::string, &options::db_name_,
      &options::db_name_specified_ >;
    _cli_options_map_["--db-host"] =
    &::cli::thunk< options, std::string, &options::db_host_,
      &options::db_host_specified_ >;
    _cli_options_map_["-h"] =
    &::cli::thunk< options, std::string, &options::db_host_,
      &options::db_host_specified_ >;
    _cli_options_map_["--db-port"] =
    &::cli::thunk< options, std::uint16_t, &options::db_port_,
      &options::db_port_specified_ >;
    _cli_options_map_["-p"] =
    &::cli::thunk< options, std::uint16_t, &options::db_port_,
      &options::db_port_specified_ >;
    _cli_options_map_["--bpkg"] =
    &::cli::thunk< options, brep::path, &options::bpkg_,
      &options::bpkg_specified_ >;
    _cli_options_map_["--bpkg-option"] =
    &::cli::thunk< options, brep::strings, &options::bpkg_option_,
      &options::bpkg_option_specified_ >;
    _cli_options_map_["--pager"] =
    &::cli::thunk< options, std::string, &options::pager_,
      &options::pager_specified_ >;
    _cli_options_map_["--pager-option"] =
    &::cli::thunk< options, std::vector<std::string>, &options::pager_option_,
      &options::pager_option_specified_ >;
    _cli_options_map_["--help"] =
    &::cli::thunk< options, bool, &options::help_ >;
    _cli_options_map_["--version"] =
    &::cli::thunk< options, bool, &options::version_ >;
  }
};

static _cli_options_map_init _cli_options_map_init_;

bool options::
_parse (const char* o, ::cli::scanner& s)
{
  _cli_options_map::const_iterator i (_cli_options_map_.find (o));

  if (i != _cli_options_map_.end ())
  {
    (*(i->second)) (*this, s);
    return true;
  }

  return false;
}

bool options::
_parse (::cli::scanner& s,
        ::cli::unknown_mode opt_mode,
        ::cli::unknown_mode arg_mode)
{
  // Can't skip combined flags (--no-combined-flags).
  //
  assert (opt_mode != ::cli::unknown_mode::skip);

  bool r = false;
  bool opt = true;

  while (s.more ())
  {
    const char* o = s.peek ();

    if (std::strcmp (o, "--") == 0)
    {
      opt = false;
      s.skip ();
      r = true;
      continue;
    }

    if (opt)
    {
      if (_parse (o, s))
      {
        r = true;
        continue;
      }

      if (std::strncmp (o, "-", 1) == 0 && o[1] != '\0')
      {
        // Handle combined option values.
        //
        std::string co;
        if (const char* v = std::strchr (o, '='))
        {
          co.assign (o, 0, v - o);
          ++v;

          int ac (2);
          char* av[] =
          {
            const_cast<char*> (co.c_str ()),
            const_cast<char*> (v)
          };

          ::cli::argv_scanner ns (0, ac, av);

          if (_parse (co.c_str (), ns))
          {
            // Parsed the option but not its value?
            //
            if (ns.end () != 2)
              throw ::cli::invalid_value (co, v);

            s.next ();
            r = true;
            continue;
          }
          else
          {
            // Set the unknown option and fall through.
            //
            o = co.c_str ();
          }
        }

        // Handle combined flags.
        //
        char cf[3];
        {
          const char* p = o + 1;
          for (; *p != '\0'; ++p)
          {
            if (!((*p >= 'a' && *p <= 'z') ||
                  (*p >= 'A' && *p <= 'Z') ||
                  (*p >= '0' && *p <= '9')))
              break;
          }

          if (*p == '\0')
          {
            for (p = o + 1; *p != '\0'; ++p)
            {
              std::strcpy (cf, "-");
              cf[1] = *p;
              cf[2] = '\0';

              int ac (1);
              char* av[] =
              {
                cf
              };

              ::cli::argv_scanner ns (0, ac, av);

              if (!_parse (cf, ns))
                break;
            }

            if (*p == '\0')
            {
              // All handled.
              //
              s.next ();
              r = true;
              continue;
            }
            else
            {
              // Set the unknown option and fall through.
              //
              o = cf;
            }
          }
        }

        switch (opt_mode)
        {
          case ::cli::unknown_mode::skip:
          {
            s.skip ();
            r = true;
            continue;
          }
          case ::cli::unknown_mode::stop:
          {
            break;
          }
          case ::cli::unknown_mode::fail:
          {
            throw ::cli::unknown_option (o);
          }
        }

        break;
      }
    }

    switch (arg_mode)
    {
      case ::cli::unknown_mode::skip:
      {
        s.skip ();
        r = true;
        continue;
      }
      case ::cli::unknown_mode::stop:
      {
        break;
      }
      case ::cli::unknown_mode::fail:
      {
        throw ::cli::unknown_argument (o);
      }
    }

    break;
  }

  return r;
}

::cli::usage_para
print_usage (::std::ostream& os, ::cli::usage_para p)
{
  CLI_POTENTIALLY_UNUSED (os);

  if (p != ::cli::usage_para::none)
    os << ::std::endl;

  os << "\033[1mSYNOPSIS\033[0m" << ::std::endl
     << ::std::endl
     << "\033[1mbrep-load --help\033[0m" << ::std::endl
     << "\033[1mbrep-load --version\033[0m" << ::std::endl
     << "\033[1mbrep-load\033[0m [\033[4moptions\033[0m] \033[4mloadtab\033[0m\033[0m" << ::std::endl
     << ::std::endl
     << "\033[1mDESCRIPTION\033[0m" << ::std::endl
     << ::std::endl
     << "\033[1mbrep-load\033[0m reads the list of repositories from the specified \033[4mloadtab\033[0m" << ::std::endl
     << "configuration file, fetches their manifest files, and loads the repository and" << ::std::endl
     << "package information into the \033[1mpackage\033[0m database, suitable for consumption by the" << ::std::endl
     << "\033[1mbrep\033[0m web module." << ::std::endl
     << ::std::endl
     << "Note that \033[1mbrep-load\033[0m expects the \033[1mpackage\033[0m database schema to have already been" << ::std::endl
     << "created using \033[1mbrep-migrate(1)\033[0m." << ::std::endl
     << ::std::endl
     << "Also note that \033[1mbrep-load\033[0m requires \033[1mbpkg(1)\033[0m to fetch repository information. See" << ::std::endl
     << "\033[1m--bpkg\033[0m for more information on the package manager program." << ::std::endl;

  p = ::options::print_usage (os, ::cli::usage_para::text);

  if (p != ::cli::usage_para::none)
    os << ::std::endl;

  os << "\033[1mEXIT STATUS\033[0m" << ::std::endl
     << ::std::endl
     << "\033[1m0\033[0m" << ::std::endl
     << "    Success." << ::std::endl
     << "\033[1m1\033[0m" << ::std::endl
     << "    Fatal error." << ::std::endl
     << "\033[1m2\033[0m" << ::std::endl
     << "    An instance of \033[1mbrep-load\033[0m or some other \033[1mbrep\033[0m utility is already running. Try" << ::std::endl
     << "    again." << ::std::endl
     << "\033[1m3\033[0m" << ::std::endl
     << "    Recoverable database error. Try again." << ::std::endl;

  p = ::cli::usage_para::text;

  return p;
}

// Begin epilogue.
//
//
// End epilogue.

