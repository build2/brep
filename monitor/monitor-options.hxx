// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

#ifndef MONITOR_MONITOR_OPTIONS_HXX
#define MONITOR_MONITOR_OPTIONS_HXX

// Begin prologue.
//
//
// End prologue.

#include <vector>

#include <string>

#include <cstddef>

#include <cstdint>

#include <mod/module-options.hxx>

namespace brep
{
  namespace options
  {
    class monitor
    {
      public:
      monitor ();

      monitor (int& argc,
               char** argv,
               bool erase = false,
               ::brep::cli::unknown_mode option = ::brep::cli::unknown_mode::fail,
               ::brep::cli::unknown_mode argument = ::brep::cli::unknown_mode::stop);

      monitor (int start,
               int& argc,
               char** argv,
               bool erase = false,
               ::brep::cli::unknown_mode option = ::brep::cli::unknown_mode::fail,
               ::brep::cli::unknown_mode argument = ::brep::cli::unknown_mode::stop);

      monitor (int& argc,
               char** argv,
               int& end,
               bool erase = false,
               ::brep::cli::unknown_mode option = ::brep::cli::unknown_mode::fail,
               ::brep::cli::unknown_mode argument = ::brep::cli::unknown_mode::stop);

      monitor (int start,
               int& argc,
               char** argv,
               int& end,
               bool erase = false,
               ::brep::cli::unknown_mode option = ::brep::cli::unknown_mode::fail,
               ::brep::cli::unknown_mode argument = ::brep::cli::unknown_mode::stop);

      monitor (::brep::cli::scanner&,
               ::brep::cli::unknown_mode option = ::brep::cli::unknown_mode::fail,
               ::brep::cli::unknown_mode argument = ::brep::cli::unknown_mode::stop);

      // Option accessors.
      //
      const std::size_t&
      build_timeout () const;

      bool
      build_timeout_specified () const;

      const std::size_t&
      report_timeout () const;

      bool
      report_timeout_specified () const;

      const bool&
      full_report () const;

      const bool&
      clean () const;

      const std::string&
      build_db_user () const;

      bool
      build_db_user_specified () const;

      const std::string&
      build_db_password () const;

      bool
      build_db_password_specified () const;

      const std::string&
      build_db_name () const;

      bool
      build_db_name_specified () const;

      const std::string&
      build_db_host () const;

      bool
      build_db_host_specified () const;

      const std::uint16_t&
      build_db_port () const;

      bool
      build_db_port_specified () const;

      const std::string&
      pager () const;

      bool
      pager_specified () const;

      const std::vector<std::string>&
      pager_option () const;

      bool
      pager_option_specified () const;

      const bool&
      help () const;

      const bool&
      version () const;

      // Print usage information.
      //
      static ::brep::cli::usage_para
      print_usage (::std::ostream&,
                   ::brep::cli::usage_para = ::brep::cli::usage_para::none);

      // Implementation details.
      //
      protected:
      bool
      _parse (const char*, ::brep::cli::scanner&);

      private:
      bool
      _parse (::brep::cli::scanner&,
              ::brep::cli::unknown_mode option,
              ::brep::cli::unknown_mode argument);

      public:
      std::size_t build_timeout_;
      bool build_timeout_specified_;
      std::size_t report_timeout_;
      bool report_timeout_specified_;
      bool full_report_;
      bool clean_;
      std::string build_db_user_;
      bool build_db_user_specified_;
      std::string build_db_password_;
      bool build_db_password_specified_;
      std::string build_db_name_;
      bool build_db_name_specified_;
      std::string build_db_host_;
      bool build_db_host_specified_;
      std::uint16_t build_db_port_;
      bool build_db_port_specified_;
      std::string pager_;
      bool pager_specified_;
      std::vector<std::string> pager_option_;
      bool pager_option_specified_;
      bool help_;
      bool version_;
    };
  }
}

// Print page usage information.
//
::brep::cli::usage_para
print_usage (::std::ostream&,
             ::brep::cli::usage_para = ::brep::cli::usage_para::none);

#include <monitor/monitor-options.ixx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MONITOR_MONITOR_OPTIONS_HXX
