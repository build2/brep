// file      : mod/options.cli -*- C++ -*-
// copyright : Copyright (c) 2014-2017 Code Synthesis Ltd
// license   : MIT; see accompanying LICENSE file

include <web/xhtml-fragment.hxx>;

include <libbrep/types.hxx>;

include <mod/options-types.hxx>;

namespace brep
{
  // Web module configuration options.
  //
  namespace options
  {
    // Option groups.
    //
    class module
    {
      string email
      {
        "<email>",
        "Repository email. This email is used for the \cb{From:} header in
         emails send by \cb{brep} (for example, build failure notifications)."
      }

      string host
      {
        "<host>",
        "Repository host. It specifies the scheme and the host address (but
         not the root path; see \cb{root} below) that will be used whenever
         \cb{brep} needs to construct an absolute URL to one of its locations
         (for example, a link to a build log that is being send via email)."
      }

      dir_path root = "/"
      {
        "<path>"
        "Repository root. That is, this is the part of the URL between the
         host name and the start of the repository. For example, root value
         '\cb{/pkg}' means the repository URL is \cb{http://example.org/pkg/}.
         Specify '\cb{/}' to use the web server root
         (\cb{http://example.org/})."
      }

      uint16_t verbosity = 0
      {
        "<level>",
        "Trace verbosity level. Level 0 disables tracing, which is also the
         default."
      }
    };

    class package_db
    {
      string package-db-user
      {
        "<user>",
        "Package database user name. If not specified, then operating system
         (login) name is used."
      }

      string package-db-password
      {
        "<pass>",
        "Package database password. If not specified, then login without
         password is expected to work."
      }

      string package-db-name = "brep_package"
      {
        "<name>",
        "Package database name. If not specified, then \cb{brep_package} is
         used by default."
      }

      string package-db-host
      {
        "<host>",
        "Package database host name, address, or socket. If not specified, then
         connect to \cb{localhost} using the operating system-default
         mechanism (Unix-domain socket, etc)."
      }

      uint16_t package-db-port = 0
      {
        "<port>",
        "Package database port number. If not specified, the default port is
         used."
      }

      size_t package-db-max-connections = 5
      {
        "<num>",
        "The maximum number of concurrent package database connections per web
         server process. If 0, then no limitation is applied. The default is
         5."
      }

      size_t package-db-retry = 10
      {
        "<num>",
        "The maximum number of times to retry package database transactions in
         the face of recoverable failures (deadlock, loss of connection, etc).
         The default is 10."
      }
    };

    class build
    {
      path build-config
      {
        "<buildtab>",
        "Build configuration file. If not specified, then the package building
         functionality will be disabled. If specified, then the build database
         must be configured (see \cb{build-db-*})."
      }

      size_t build-forced-rebuild-timeout = 600
      {
        "<seconds>",
        "Time to wait before considering a package for a forced rebuild. Must
         be specified in seconds. Default is 10 minutes."
      }

      size_t build-normal-rebuild-timeout = 86400
      {
        "<seconds>",
        "Time to wait before considering a package for a normal rebuild. Must
         be specified in seconds. Default is 24 hours."
      }
    };

    class build_db
    {
      string build-db-user
      {
        "<user>",
        "Build database user name. If not specified, then operating system
         (login) name is used."
      }

      string build-db-password
      {
        "<pass>",
        "Build database password. If not specified, then login without
         password is expected to work."
      }

      string build-db-name = "brep_build"
      {
        "<name>",
        "Build database name. If not specified, then \cb{brep_build} is used
         by default."
      }

      string build-db-host
      {
        "<host>",
        "Build database host name, address, or socket. If not specified, then
         connect to \cb{localhost} using the operating system-default
         mechanism (Unix-domain socket, etc)."
      }

      uint16_t build-db-port = 0
      {
        "<port>",
        "Build database port number. If not specified, the default port is
         used."
      }

      size_t build-db-max-connections = 5
      {
        "<num>",
        "The maximum number of concurrent build database connections per web
         server process. If 0, then no limitation is applied. The default is
         5."
      }

      size_t build-db-retry = 10
      {
        "<num>",
        "The maximum number of times to retry build database transactions in
         the face of recoverable failures (deadlock, loss of connection, etc).
         The default is 10."
      }
    };

    class page
    {
      web::xhtml::fragment logo
      {
        "<xhtml>",
        "Web page logo. It is displayed in the page header aligned to the left
         edge. The value is treated as an XHTML5 fragment."
      }

      vector<page_menu> menu;
      {
        "<label=link>",
        "Web page menu. Each entry is displayed in the page header in the
         order specified and aligned to the right edge. A link target that
         starts with '\cb{/}' or contains '\cb{:}' is used as is. Otherwise,
         it is prefixed with the repository web interface root."
      }
    };

    class search
    {
      uint16_t search-results = 10
      {
        "<num>",
        "Number of results per page. The default is 10."
      }

      uint16_t search-pages = 5
      {
        "<num>",
        "Number of pages in navigation (pager). The default is 5."
      }
    };

    class package
    {
      uint16_t package-description = 500
      {
        "<len>",
        "Number of package description characters to display in brief pages.
         The default is 500 (~ 80 characters * 6 lines)."
      }

      uint16_t package-changes = 5000;
      {
        "<len>",
        "Number of package changes characters to display in brief pages. The
         default is 5000 (~ 80 chars x 60 lines)."
      }
    };

    // Module options.
    //
    class package_search: search, package_db, page, module
    {
      string search-title = "Packages"
      {
        "<text>",
        "Package search page title. It is placed inside XHTML5 <title>
         element."
      }
    };

    class package_details: package, search, package_db, page, module
    {
    };

    class package_version_details: package, package_db, page, module
    {
    };

    class repository_details: package_db, page, module
    {
    };

    class build_task: build, package_db, build_db, module
    {
      size_t build-task-request-max-size = 102400
      {
        "<bytes>",
        "The maximum size of the build task request manifest accepted. Note
         that the HTTP POST request body is cached to retry database
         transactions in the face of recoverable failures (deadlock, loss of
         connection, etc). The default is 100K."
      }

      size_t build-result-timeout = 10800
      {
        "<seconds>",
        "Time to wait before considering the expected task result lost. Must be
         specified in seconds. The default is 3 hours."
      }
    };

    class build_result: build, package_db, build_db, module
    {
      size_t build-result-request-max-size = 10240000
      {
        "<bytes>",
        "The maximum size of the build result manifest accepted. Note that the
         HTTP POST request body is cached to retry database transactions in the
         face of recoverable failures (deadlock, loss of connection, etc). The
         default is 10M."
      }
    };

    class build_log: build, package_db, build_db, module
    {
    };

    class build_force: build, package_db, build_db, module
    {
    };

    class repository_root: module
    {
    };
  }

  // Web module HTTP request parameters.
  //
  namespace params
  {
    // Use parameters long names in the C++ code, short aliases (if present)
    // in HTTP URL.
    //
    class package_search
    {
      // Display package search result list starting from this page.
      //
      uint16_t page | p;

      // Package search criteria.
      //
      string query | q;
    };

    class package_details
    {
      // Display package version search result list starting from this page.
      //
      uint16_t page | p;

      // Package version search criteria.
      //
      string query | q;

      // Page form.
      //
      page_form form | f = page_form::brief;
    };

    class package_version_details
    {
      // Page form.
      //
      page_form form | f = page_form::brief;
    };

    class repository_details
    {
      // No parameters so far.
      //
    };

    class build_task
    {
      // Package repository display name.
      //
      vector<string> repository | r;
    };

    class build_result
    {
      // No parameters so far.
      //
    };

    class build_log
    {
      // No parameters so far.
      //
    };

    // All parameters are non-optional.
    //
    class build_force
    {
      // Package name.
      //
      string package | p;

      // Package version. May not be url-encoded, in which case the plus
      // character is considered literally (rather than as the encoded space
      // character). In other words, after url-decoding the space character is
      // treated the same way as the plus character.
      //
      // @@ Make it of the version type? Maybe after it get moved to libbpkg/types.hxx
      //    or at least the second use case appear.
      //
      string version | v;

      // Package build configuration.
      //
      string configuration | c;

      // Package rebuild reason. Must not be empty.
      //
      string reason;
    };
  }
}
